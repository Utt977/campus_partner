import React, { useEffect, useState, useRef } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { BASE_URL } from '../utils/constant';
import { createSocketConnection } from "../utils/socket";

const Chat = () => {
  const { targetUserId } = useParams();
  const user = useSelector(store => store.user);
  const userId = user?._id;
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  
  const messagesEndRef = useRef(null);  // Reference for the end of the messages container

  // Fetch chat messages
  const fetchChatMessages = async () => {
    try {
      const chat = await axios.get(BASE_URL + "/chat/" + targetUserId, { withCredentials: true });
      const chatMessages = chat?.data?.messages.map((msg) => {
        const { senderId, text } = msg;
        return {
          firstName: senderId?.firstName,
          lastName: senderId?.lastName,
          text
        }
      })
      setMessages(chatMessages);
    } catch (err) {
      console.log(err);
    }
  };

  // Scroll to the bottom of the messages container when messages update
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // UseEffect to fetch initial data
  useEffect(() => {
    fetchChatMessages();
  }, []);

  useEffect(() => {
    if (!userId) {
      return;
    }
    const socket = createSocketConnection();
    socket.emit("joinChat", { firstName: user.firstName, userId, targetUserId });

    socket.on("messageReceived", ({ firstName, lastName, text }) => {
      setMessages((messages) => [...messages, { firstName, lastName, text }]);
    })

    return () => {
      socket.disconnect();
    }
  }, [userId, targetUserId]);

  // Send message function
  const sendMessage = () => {
    const socket = createSocketConnection();
    socket.emit("sendMessage", {
      firstName: user.firstName,
      lastName: user.lastName,
      userId,
      targetUserId,
      text: newMessage
    });
    setNewMessage("");
  }

  // Scroll to the most recent message after messages update
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  return (
    <div className="w-full mx-auto max-w-xl h-[80vh] flex flex-col bg-gray-800 text-white">
      {/* Header Section with Chat Title */}
      <div className="flex items-center justify-center p-4 bg-gray-900 border-b border-gray-700">
        <h2 className="text-2xl font-semibold">Chat</h2>
      </div>

      {/* Messages Section */}
      <div className="flex-1 overflow-auto p-4 space-y-4">
        {messages.map((msg, index) => (
          <div key={index} className={`chat ${user.firstName === msg.firstName ? 'chat-end' : 'chat-start'}`}>
            <div className="chat-header">
              {`${msg.firstName} ${msg.lastName}`}
              {/* <time className="text-xs opacity-50"> 2 hours ago</time> */}
            </div>
            <div className="chat-bubble">{msg.text}</div>
            {/* <div className="chat-footer opacity-50">Seen</div> */}
          </div>
        ))}
        <div ref={messagesEndRef} /> {/* This div will be used to scroll to the bottom */}
      </div>

      {/* Message Input Section */}
      <div className="p-4 border-t border-gray-700 flex items-center gap-2 bg-gray-900">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          className="flex-1 border border-gray-500 rounded-full p-3 bg-gray-800 text-white"
          placeholder="Type a message"
        />
        <button onClick={sendMessage} className="btn bg-green-500 text-white p-3 rounded-full hover:bg-green-600">
          Send
        </button>
      </div>
    </div>
  );
};

export default Chat;


import axios from 'axios';
import React from 'react';
import { useDispatch } from 'react-redux';
import { motion } from 'framer-motion';
import { BASE_URL } from '../utils/constant';
import { removeUserFromFeed } from '../utils/feedSlice';
import { FaTimes, FaHeart, FaBirthdayCake, FaTransgender, FaUniversity, FaStar } from 'react-icons/fa';

const UserCard = ({ user }) => {
  const dispatch = useDispatch();
  const { _id, firstName, lastName, age, gender, about, photoUrl, skills, college } = user;

  const handleSendRequest = async (status, userId) => {
    try {
      await axios.post(
        `${BASE_URL}/request/send/${status}/${userId}`,
        {},
        { withCredentials: true }
      );
      dispatch(removeUserFromFeed(userId));
    } catch (err) {
      console.error('Request Error:', err.response?.data || err.message);
    }
  };

  return (
    <motion.div 
      className="relative w-full max-w-sm mx-4 sm:mx-auto bg-gray-800 rounded-xl shadow-xl overflow-hidden hover:shadow-2xl transition-shadow duration-300 mb-16 "
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
    >
      {/* Profile Image Section */}
      <div className="relative h-72 w-full"> 
        <img
          src={photoUrl}
          alt={`${firstName} ${lastName}`}
          className="w-full h-full object-contain object-center" 
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = 'https://cdn-icons-png.flaticon.com/512/149/149071.png';
          }}
        />
        <div className="absolute inset-0 bg-gradient-to-t from-gray-900/50 to-transparent" />
      </div>

      {/* Profile Content */}
      <div className="p-6 space-y-4">
        <div className="space-y-2">
          <h2 className="text-2xl font-bold text-gray-100">
            {firstName} {lastName}
          </h2>
          
          <div className="flex flex-wrap gap-4 text-sm text-gray-400">
            {age && (
              <span className="flex items-center gap-2">
                <FaBirthdayCake className="text-purple-400" />
                {age} years
              </span>
            )}
            {gender && (
              <span className="flex items-center gap-2">
                <FaTransgender className="text-blue-400" />
                {gender}
              </span>
            )}
          </div>
        </div>

        {/* College */}
        {college && (
          <div className="flex items-center gap-2 text-gray-400">
            <FaUniversity className="text-green-400 flex-shrink-0" />
            <span className="truncate">{college}</span>
          </div>
        )}

        {/* Skills */}
        {skills?.length > 0 && (
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm font-medium text-gray-300">
              <FaStar className="text-yellow-400" />
              Skills
            </div>
            <div className="flex flex-wrap gap-2">
              {skills.map((skill, index) => (
                <span
                  key={index}
                  className="px-3 py-1 text-sm bg-gray-700 text-gray-100 rounded-full"
                >
                  {skill}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* About */}
        {about && (
          <p className="text-gray-400 text-sm leading-relaxed line-clamp-3">
            {about}
          </p>
        )}

        {/* Action Buttons */}
        <div className="flex gap-3 mt-4">
          <motion.button
            onClick={() => handleSendRequest('ignored', _id)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gray-700 hover:bg-gray-600 text-red-400 rounded-lg transition-colors"
          >
            <FaTimes className="text-lg" />
            Pass
          </motion.button>

          <motion.button
            onClick={() => handleSendRequest('interested', _id)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-purple-600 hover:bg-purple-500 text-white rounded-lg transition-colors"
          >
            <FaHeart className="text-lg" />
            Connect
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
};

export default UserCard;

// Whatsapp Chat jaise chat 
import React, { useEffect, useState, useRef, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { format } from 'date-fns';
import { BASE_URL } from '../utils/constant';
import { createSocketConnection } from "../utils/socket";
import { FaPaperPlane } from 'react-icons/fa';

const Chat = () => {
    const { targetUserId } = useParams();
    const user = useSelector(store => store.user);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState("");
    const [isTyping, setIsTyping] = useState(false);
    const [typingUser, setTypingUser] = useState(null);
    const [targetUser, setTargetUser] = useState(null);
    const messagesEndRef = useRef(null);
    const socketRef = useRef(null);
    const typingTimeoutRef = useRef(null);

    const fetchChatData = useCallback(async () => {
        if (!user?._id || !targetUserId) return;

        try {
            const [userRes, chatRes] = await Promise.all([
                axios.get(`${BASE_URL}/profile/${targetUserId}`, { withCredentials: true }),
                axios.get(`${BASE_URL}/chat/${targetUserId}`, { withCredentials: true })
            ]);

            setTargetUser(userRes.data);
            const fetchedMessages = chatRes.data.messages.map(msg => ({
                ...msg,
                senderId: msg.senderId._id || msg.senderId,
                status: msg.seen ? 'read' : 'delivered',
                createdAt: msg.createdAt || msg.timestamp || new Date().toISOString()
            }));
            setMessages(fetchedMessages);
        } catch (err) {
            console.error('Error fetching chat data:', err);
        }
    }, [targetUserId, user]);

    useEffect(() => {
        fetchChatData();
    }, [fetchChatData]);

    useEffect(() => {
        if (!user?._id || !targetUserId) return;

        socketRef.current = createSocketConnection();

        socketRef.current.emit('userOnline', user._id);

        const roomId = [user._id, targetUserId].sort().join('_');
        socketRef.current.emit('joinChat', { userId: user._id, targetUserId });

        const handleMessageReceived = (message) => {
            setMessages(prev => {
                const filtered = prev.filter(msg => msg.tempId !== message.tempId);
                return [...filtered, { 
                    ...message, 
                    senderId: message.senderId,
                    status: 'delivered',
                    createdAt: message.timestamp || new Date().toISOString()
                }];
            });
        };

        const handleTypingStatus = ({ userId, firstName, isTyping }) => {
            console.log('Typing event received:', { userId, firstName, isTyping, targetUserId });
            if (userId === targetUserId) {
                setIsTyping(isTyping);
                setTypingUser(isTyping ? { firstName } : null);
            }
        };

        const handleUserStatusChanged = ({ userId, isOnline }) => {
            if (userId === targetUserId) {
                setTargetUser(prev => prev ? { ...prev, isOnline } : null);
            }
        };

        const handleMessageSeen = ({ chatId }) => {
            console.log('Message seen event received:', { chatId });
            setMessages(prev => prev.map(msg => 
                msg.senderId === user._id && !msg.seen 
                    ? { ...msg, status: 'read', seen: true } 
                    : msg
            ));
        };

        socketRef.current.on('messageReceived', handleMessageReceived);
        socketRef.current.on('typingStatus', handleTypingStatus);
        socketRef.current.on('userStatusChanged', handleUserStatusChanged);
        socketRef.current.on('messageSeen', handleMessageSeen);

        return () => {
            socketRef.current.emit('userOffline', user._id);
            socketRef.current.off('messageReceived', handleMessageReceived);
            socketRef.current.off('typingStatus', handleTypingStatus);
            socketRef.current.off('userStatusChanged', handleUserStatusChanged);
            socketRef.current.off('messageSeen', handleMessageSeen);
            socketRef.current.disconnect();
        };
    }, [user, targetUserId]);

    useEffect(() => {
        if (!socketRef.current) return;

        const handleTyping = () => {
            socketRef.current.emit('typing', { 
                userId: user._id,
                firstName: user.firstName,
                targetUserId,
                isTyping: !!newMessage 
            });
            clearTimeout(typingTimeoutRef.current);
            if (newMessage) {
                typingTimeoutRef.current = setTimeout(() => {
                    socketRef.current.emit('typing', { 
                        userId: user._id,
                        firstName: user.firstName,
                        targetUserId,
                        isTyping: false 
                    });
                }, 1000);
            }
        };

        handleTyping();
    }, [newMessage, targetUserId, user]);

    const sendMessage = () => {
        if (!newMessage.trim() || !user?._id) return;

        const tempId = Date.now().toString();
        const tempMessage = {
            _id: tempId,
            text: newMessage,
            senderId: user._id,
            createdAt: new Date().toISOString(),
            status: 'sent',
            tempId
        };

        setMessages(prev => [...prev, tempMessage]);
        setNewMessage('');

        socketRef.current.emit('sendMessage', {
            userId: user._id,
            targetUserId,
            text: newMessage,
            tempId
        });
    };

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    // Function to format date for display
    const formatMessageDate = (date) => {
        const today = new Date();
        const messageDate = new Date(date);
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);

        if (format(today, 'yyyy-MM-dd') === format(messageDate, 'yyyy-MM-dd')) {
            return 'Today';
        } else if (format(yesterday, 'yyyy-MM-dd') === format(messageDate, 'yyyy-MM-dd')) {
            return 'Yesterday';
        } else {
            return format(messageDate, 'dd MMMM yyyy'); // e.g., "16 March 2025"
        }
    };

    if (!user) {
        return <div className="text-center p-4 text-gray-800">Please log in to view the chat.</div>;
    }

    return (
        <div className="w-full max-w-2xl mx-auto h-[80vh] flex flex-col bg-[#F0F0F0] shadow-lg">
            {/* Chat Header */}
            <div className="p-4 bg-[#075E54] flex items-center shadow-md">
                {targetUser ? (
                    <div className="flex items-center w-full">
                        <div className={`avatar ${targetUser.isOnline ? 'online' : 'offline'}`}>
                            <div className="w-10 rounded-full">
                                <img 
                                    src={targetUser.photoUrl || 'https://cdn-icons-png.flaticon.com/512/149/149071.png'} 
                                    alt="Profile" 
                                />
                            </div>
                        </div>
                        <div className="ml-4">
                            <h2 className="font-semibold text-white text-lg">
                                {targetUser.firstName} {targetUser.lastName}
                            </h2>
                            <p className="text-sm text-gray-200">
                                {targetUser.isOnline ? 'Online' : `Last seen ${formatLastActive(targetUser.lastActive)}`}
                            </p>
                        </div>
                        {isTyping && typingUser && (
                            <div className="ml-auto text-sm text-gray-200 animate-pulse">
                                {typingUser.firstName} is typing...
                            </div>
                        )}
                    </div>
                ) : (
                    <div className="text-white">Loading target user...</div>
                )}
            </div>

            {/* Messages Container */}
            <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-[#F0F0F0]">
                {messages.length > 0 ? (
                    messages.map((msg, index) => {
                        const currentDate = new Date(msg.createdAt);
                        const prevMsg = index > 0 ? messages[index - 1] : null;
                        const prevDate = prevMsg ? new Date(prevMsg.createdAt) : null;
                        const showDateDivider = !prevDate || format(currentDate, 'yyyy-MM-dd') !== format(prevDate, 'yyyy-MM-dd');

                        return (
                            <React.Fragment key={msg._id || msg.tempId}>
                                {showDateDivider && (
                                    <div className="text-center my-4">
                                        <span className="bg-gray-200 text-gray-600 text-xs px-3 py-1 rounded-full shadow-sm">
                                            {formatMessageDate(msg.createdAt)}
                                        </span>
                                    </div>
                                )}
                                <div 
                                    className={`flex ${msg.senderId === user._id ? 'justify-end' : 'justify-start'}`}
                                >
                                    <div 
                                        className={`max-w-[70%] p-3 rounded-lg shadow-md ${
                                            msg.senderId === user._id 
                                                ? 'bg-[#DCF8C6] text-black' 
                                                : 'bg-white text-black'
                                        }`}
                                        style={{
                                            background: msg.senderId === user._id 
                                                ? 'linear-gradient(135deg, #DCF8C6, #C8E6A7)' 
                                                : 'linear-gradient(135deg, #FFFFFF, #F5F5F5)',
                                        }}
                                    >
                                        <p className="font-sans text-sm font-medium">{msg.text}</p>
                                        <div className="text-xs text-gray-500 mt-1 flex justify-end">
                                            {format(new Date(msg.createdAt), 'hh:mm a')}
                                            {msg.senderId === user._id && msg.status === 'read' && (
                                                <span className="ml-2 text-blue-500">✓✓</span>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </React.Fragment>
                        );
                    })
                ) : (
                    <div className="text-center text-gray-600">No messages yet.</div>
                )}
                <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="sticky bottom-0 p-4 bg-[#F0F0F0] flex items-center gap-3 shadow-inner">
                <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
                    className="flex-1 p-3 rounded-full bg-white text-black border-none shadow-sm focus:outline-none focus:ring-2 focus:ring-[#25D366] transition-all duration-200"
                    placeholder="Type a message..."
                />
                <button 
                    onClick={sendMessage}
                    className="bg-[#25D366] text-white rounded-full p-3 hover:scale-105 active:scale-95 transition-transform duration-150 flex items-center justify-center shadow-md"
                    disabled={!newMessage.trim()}
                >
                    <FaPaperPlane className="text-lg" />
                </button>
            </div>
        </div>
    );
};

const formatLastActive = (lastActive) => {
    if (!lastActive) return 'recently';
    const now = new Date();
    const diff = now - new Date(lastActive);
    const minutes = Math.floor(diff / 60000);
    if (minutes < 1) return 'just now';
    if (minutes < 60) return `${minutes}m ago`;
    if (minutes < 1440) return `${Math.floor(minutes/60)}h ago`;
    return `${Math.floor(minutes/1440)}d ago`;
};

export default Chat;